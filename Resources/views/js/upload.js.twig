<script>
    let previewTemplate = $('#upload-template').html()

    new Dropzone('div#dropzone-{{ form.upload.vars.id }}', {
        url: '{{ path('upload') }}',
        chunking: true,
        chunkSize: 8000000,
        retryChunks: true,
        maxFilesize: {{ form.upload.vars.upload_constraints.maxSizeBinary }},
        acceptedFiles: '{{ form.upload.vars.upload_constraints.mimeTypes|join(',')|escape('js') }}',
        thumbnailWidth: 100,
        thumbnailHeight: 100,
        parallelUploads: 1,
        headers: {
            'upload_constraints': '{{ form.upload.vars.upload_constraints|json_encode|escape('js') }}'
        },
        previewTemplate: previewTemplate,
        dictFallbackMessage: 'Your browser does not support drag n drop file uploads.',
        dictFallbackText: 'Please use the fallback form below to upload your files like in the olden days.',
        dictFileTooBig: '{{ 'The file is too large. Allowed maximum size is {{ limit }} {{ suffix }}.'|trans(
            {
                '{{ limit }}': form.upload.vars.upload_constraints.maxSize,
            },
            'validators'
        )|replace(
            {
                'k {{ suffix }}': 'binary.kb'|trans({}, 'user_media'),
                'K {{ suffix }}': 'binary.kb'|trans({}, 'user_media'),
                'm {{ suffix }}': 'binary.mb'|trans({}, 'user_media'),
                'M {{ suffix }}': 'binary.mb'|trans({}, 'user_media'),
                'g {{ suffix }}': 'binary.gb'|trans({}, 'user_media'),
                'G {{ suffix }}': 'binary.gb'|trans({}, 'user_media'),
                't {{ suffix }}': 'binary.tb'|trans({}, 'user_media'),
                'T {{ suffix }}': 'binary.tb'|trans({}, 'user_media'),
            }
        ) }}',
        dictInvalidFileType: '{{ 'The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.'|trans(
            {
                '{{ type }}': '__SF_VALIDATOR_TYPE__',
                '{{ types }}': form.upload.vars.upload_constraints.mimeTypes|join(' ; ')|escape('js'),
            },
            'validators'
        )|replace({ ' (__SF_VALIDATOR_TYPE__)': '' }) }}',
        dictResponseError: '{{ 'Error'|trans({}, 'validators') }} : Code \{\{statusCode\}\}.',
        dictFileSizeUnits: {
            tb: '{{ 'binary.tb'|trans({}, 'user_media') }}',
            gb: '{{ 'binary.gb'|trans({}, 'user_media') }}',
            mb: '{{ 'binary.mb'|trans({}, 'user_media') }}',
            kb: '{{ 'binary.kb'|trans({}, 'user_media') }}',
            b: '{{ 'binary.b'|trans({}, 'user_media') }}',
        },
        init: function() {
            let myDropzone = this
            let $input = $(myDropzone.element).find('#{{ form.upload.vars.id }}')

            {% for file in form.upload.vars.initial_files %}
                myDropzone.displayExistingFile({
                    name: '{{ file.name|escape('js') }}',
                    size: {{ file.size }}
                }, '{{ file.path|escape('js') }}')
            {% endfor %}

            let $status = $(myDropzone.element).find('span[data-dz-status]')
            let $progressBar = $(myDropzone.element).find('.progress-bar')

            $status.addClass('btn-success')
            $status.text('{{ 'label.finished'|trans({}, 'user_media') }}')
            $progressBar.attr('aria-valuenow', '100')
            $progressBar.css('width', '100%')
            $progressBar.removeClass('progress-bar-striped')
            $progressBar.removeClass('progress-bar-animated')

            this.on('addedfile', function(file) {
                let $previewElement = $(file.previewElement)
                let $status = $previewElement.find('span[data-dz-status]')

                $status.addClass('btn-warning')
                $status.text('{{ 'label.in_progress'|trans({}, 'user_media') }}')
            })

            this.on('sending', function(data, xhr, formData) {
                {% for element in form.children %}
                    {% if 'upload' != element.vars.name %}
                        formData.append('{{ element.vars.name }}', $('#{{ element.vars.id }}').find(':selected').val())
                    {% endif %}
                {% endfor %}
            })

            this.on('success', function(file) {
                try {
                    let responseJson = JSON.parse(file.xhr.responseText)
                    let $previewElement = $(file.previewElement)

                    if (true === responseJson.success) {
                        let inputValue = $input.val()
                        let newInputValue = []

                        if ('' !== inputValue) {
                            newInputValue = JSON.parse(inputValue)
                        }

                        newInputValue.push(responseJson.path)

                        let $status = $previewElement.find('span[data-dz-status]')
                        let $progressBar = $previewElement.find('.progress-bar')

                        $status.removeClass('btn-warning')
                        $status.addClass('btn-success')
                        $status.text('{{ 'label.finished'|trans({}, 'user_media') }}')
                        $progressBar.attr('aria-valuenow', '100')
                        $progressBar.removeClass('progress-bar-striped')
                        $progressBar.removeClass('progress-bar-animated')

                        $input.val(JSON.stringify(newInputValue))

                        let $alertNoMedia = $('.alert-no-media')
                        let $gallery = null

                        if ($alertNoMedia.length) {
                            $alertNoMedia.remove()

                            $gallery = $('<div class="row gallery"></div>')
                            $('.main').append($gallery)
                        } else {
                            $gallery = $('.gallery')
                        }

                        let $galleryItem = $(responseJson.html)
                        $galleryItem.find('[data-toggle="tooltip"]').tooltip()

                        $gallery.prepend($galleryItem)
                    } else {
                        myDropzone.emit('error', file, responseJson.message)
                    }
                } catch (error) {
                    console.log(error)
                }
            })

            this.on('error', function(file, errorMessage) {
                let $previewElement = $(file.previewElement)
                let $invalidFeedback = $previewElement.find('p.invalid-feedback')
                let $formErrorIcon = $invalidFeedback.find('span.form-error-icon')
                let $status = $previewElement.find('span[data-dz-status]')
                let $progressBar = $previewElement.find('.progress-bar')

                $invalidFeedback.removeClass('d-hide')
                $invalidFeedback.addClass('d-block')
                $formErrorIcon.text('{{ 'Error'|trans({}, 'validators') }}')
                $status.removeClass('btn-warning')
                $status.addClass('btn-danger')
                $status.text('{{ 'Error'|trans({}, 'validators') }}')
                $progressBar.removeClass('bg-success')
                $progressBar.addClass('bg-danger')
                $progressBar.removeClass('progress-bar-animated')
                $progressBar.attr('aria-valuenow', '100')
                $progressBar.css('width', '100%')
            })
        }
    })
</script>